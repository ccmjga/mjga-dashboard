import createClient, { type Middleware } from "openapi-fetch";
import useAuthStore from "../composables/store/useAuthStore";
import type { paths } from "./types/schema"; // generated by openapi-typescript
import {
	ForbiddenError,
	InternalServerError,
	SystemError,
	UnAuthError,
} from "../types/error.d";

const myMiddleware: Middleware = {
	async onRequest({ request, options }) {
		const authStore = useAuthStore();
		request.headers.set("Authorization", authStore.get());
		return request;
	},
	async onResponse({ request, response, options }) {
		const { body, ...resOptions } = response;
		if (response.status >= 400 && response.status < 500) {
			if (response.status === 401) {
				await handleAuthError(response);
			} else if (response.status === 403) {
				await handleForbiddenError(response);
			} else {
				await handleSystemError(response);
			}
		} else if (response.status >= 500) {
			await handleBusinessError(response);
		} else {
			return response;
		}
	},
	async onError({ error }) {
		// wrap errors thrown by fetch
		console.error(error);
		return;
	},
};

const client = createClient<paths>({
	baseUrl: `http://localhost:${import.meta.env.VITE_BACKEND_PORT}/`,
	querySerializer: {
		object: {
			style: "form",
			explode: true,
		},
	},
});

// register middleware
client.use(myMiddleware);

const handleAuthError = async (response: Response) => {
	throw new UnAuthError(response.status);
};

const handleForbiddenError = async (response: Response) => {
	throw new ForbiddenError(response.status);
};

const handleSystemError = async (response: Response) => {
	throw new SystemError(response.status);
};

const handleBusinessError = async (response: Response) => {
	const result = await response.json();
	console.error(response);
	throw new InternalServerError(response.status, result.detail);
};

export default client;
