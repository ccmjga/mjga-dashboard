import createClient, { type Middleware } from "openapi-fetch";
import type { paths } from "./types/schema"; // generated by openapi-typescript
import useAuthStore from "../composables/store/useAuthStore";

const myMiddleware: Middleware = {
	async onRequest({ request, options }) {
		const authStore = useAuthStore();
		request.headers.set("Authorization", authStore.get());
		return request;
	},
	async onResponse({ request, response, options }) {
		const { body, ...resOptions } = response;
		if (response.status >= 400 && response.status < 500) {
			await handleSystemError(response);
		} else if (response.status >= 500) {
			await handleBusinessError(response);
		} else if (response.ok) {
			return response;
		}
	},
	async onError({ error }) {
		// wrap errors thrown by fetch
		console.error(error);
		return;
	},
};

const client = createClient<paths>({
	baseUrl: "http://localhost:8080/",
	querySerializer: {
		object: {
			style: "form",
			explode: true,
		},
	},
});

// register middleware
client.use(myMiddleware);

const handleSystemError = async (response: Response) => {
	const result = await response.text();
	throw new Error(result);
};

const handleBusinessError = async (response: Response) => {
	const result = await response.json();
	throw new Error(result.detail);
};

export default client;
